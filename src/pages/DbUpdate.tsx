import { useState } from 'react';

const API_URL = "https://functions.poehali.dev/9a386a41-ad70-4d41-b906-6ba0b02f206c";

const REGIONAL_TARIFFS: Record<string, number> = {
  '–ú–æ—Å–∫–≤–∞': 6.19, '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥': 5.70, '–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 6.35,
  '–ë–µ–ª–≥–æ—Ä–æ–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 5.85, '–ë—Ä—è–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 5.72, '–í–ª–∞–¥–∏–º–∏—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 5.68,
  '–í–æ—Ä–æ–Ω–µ–∂—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 5.91, '–ò–≤–∞–Ω–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 5.54, '–ö–∞–ª—É–∂—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 6.12,
  '–ö–æ—Å—Ç—Ä–æ–º—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 5.48, '–ö—É—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 5.79, '–õ–∏–ø–µ—Ü–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 5.82,
  '–û—Ä–ª–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 5.64, '–†—è–∑–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 5.76, '–°–º–æ–ª–µ–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 5.69,
  '–¢–∞–º–±–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 5.73, '–¢–≤–µ—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 5.81, '–¢—É–ª—å—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 6.08,
  '–Ø—Ä–æ—Å–ª–∞–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 5.84, '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö–∞—Ä–µ–ª–∏—è': 6.15, '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö–æ–º–∏': 6.42,
  '–ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 6.28, '–ù–µ–Ω–µ—Ü–∫–∏–π –ê–û': 7.85, '–í–æ–ª–æ–≥–æ–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 5.94,
  '–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 6.23, '–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 5.82, '–ú—É—Ä–º–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 6.91,
  '–ù–æ–≤–≥–æ—Ä–æ–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 5.77, '–ü—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 5.73, '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ê–¥—ã–≥–µ—è': 5.34,
  '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö–∞–ª–º—ã–∫–∏—è': 5.28, '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö—Ä—ã–º': 5.67, '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π –∫—Ä–∞–π': 5.42,
  '–ê—Å—Ç—Ä–∞—Ö–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 5.39, '–í–æ–ª–≥–æ–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 5.48, '–†–æ—Å—Ç–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 5.51,
  '–°–µ–≤–∞—Å—Ç–æ–ø–æ–ª—å': 5.63, '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –î–∞–≥–µ—Å—Ç–∞–Ω': 4.89, '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ò–Ω–≥—É—à–µ—Ç–∏—è': 4.76,
  '–ö–∞–±–∞—Ä–¥–∏–Ω–æ-–ë–∞–ª–∫–∞—Ä—Å–∫–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞': 4.82, '–ö–∞—Ä–∞—á–∞–µ–≤–æ-–ß–µ—Ä–∫–µ—Å—Å–∫–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞': 4.79,
  '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –°–µ–≤–µ—Ä–Ω–∞—è –û—Å–µ—Ç–∏—è': 4.85, '–ß–µ—á–µ–Ω—Å–∫–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞': 4.73, '–°—Ç–∞–≤—Ä–æ–ø–æ–ª—å—Å–∫–∏–π –∫—Ä–∞–π': 5.24,
  '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ë–∞—à–∫–æ—Ä—Ç–æ—Å—Ç–∞–Ω': 5.18, '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ú–∞—Ä–∏–π –≠–ª': 5.32, '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ú–æ—Ä–¥–æ–≤–∏—è': 5.36,
  '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω': 5.12, '–£–¥–º—É—Ä—Ç—Å–∫–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞': 5.29, '–ß—É–≤–∞—à—Å–∫–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞': 5.34,
  '–ö–∏—Ä–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 5.44, '–ù–∏–∂–µ–≥–æ—Ä–æ–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 5.58, '–û—Ä–µ–Ω–±—É—Ä–≥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 5.22,
  '–ü–µ–Ω–∑–µ–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 5.41, '–ü–µ—Ä–º—Å–∫–∏–π –∫—Ä–∞–π': 5.37, '–°–∞–º–∞—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 5.46,
  '–°–∞—Ä–∞—Ç–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 5.39, '–£–ª—å—è–Ω–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 5.35, '–ö—É—Ä–≥–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 5.28,
  '–°–≤–µ—Ä–¥–ª–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 4.98, '–¢—é–º–µ–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 5.64, '–•–∞–Ω—Ç—ã-–ú–∞–Ω—Å–∏–π—Å–∫–∏–π –ê–û': 6.18,
  '–Ø–º–∞–ª–æ-–ù–µ–Ω–µ—Ü–∫–∏–π –ê–û': 7.24, '–ß–µ–ª—è–±–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 5.15, '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ê–ª—Ç–∞–π': 4.52,
  '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –¢—ã–≤–∞': 4.38, '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –•–∞–∫–∞—Å–∏—è': 3.82, '–ê–ª—Ç–∞–π—Å–∫–∏–π –∫—Ä–∞–π': 4.67,
  '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–∏–π –∫—Ä–∞–π': 4.23, '–ò—Ä–∫—É—Ç—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 3.21, '–ö–µ–º–µ—Ä–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 4.44,
  '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 4.67, '–û–º—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 4.89, '–¢–æ–º—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 4.56,
  '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ë—É—Ä—è—Ç–∏—è': 4.78, '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –°–∞—Ö–∞ (–Ø–∫—É—Ç–∏—è)': 7.92, '–ó–∞–±–∞–π–∫–∞–ª—å—Å–∫–∏–π –∫—Ä–∞–π': 5.87,
  '–ö–∞–º—á–∞—Ç—Å–∫–∏–π –∫—Ä–∞–π': 8.45, '–ü—Ä–∏–º–æ—Ä—Å–∫–∏–π –∫—Ä–∞–π': 6.34, '–•–∞–±–∞—Ä–æ–≤—Å–∫–∏–π –∫—Ä–∞–π': 6.28,
  '–ê–º—É—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 5.92, '–ú–∞–≥–∞–¥–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 8.12, '–°–∞—Ö–∞–ª–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': 7.38,
  '–ï–≤—Ä–µ–π—Å–∫–∞—è –ê–û': 5.84, '–ß—É–∫–æ—Ç—Å–∫–∏–π –ê–û': 9.15
};

export default function DbUpdate() {
  const [logs, setLogs] = useState<string[]>([]);
  const [running, setRunning] = useState(false);
  const [progress, setProgress] = useState(0);

  const log = (msg: string) => {
    setLogs(prev => [...prev, `[${new Date().toLocaleTimeString()}] ${msg}`]);
  };

  const api = async (action: string, data: any = {}) => {
    const res = await fetch(API_URL, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ action, ...data })
    });
    if (!res.ok) throw new Error(res.statusText);
    return res.json();
  };

  const run = async () => {
    setRunning(true);
    setLogs([]);
    setProgress(0);

    try {
      log('='.repeat(60));
      log('–û–ë–ù–û–í–õ–ï–ù–ò–ï –ë–ê–ó–´ –î–ê–ù–ù–´–•');
      log('='.repeat(60));

      log('–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
      const del = await api('delete_all_prices');
      log(`‚úì –£–¥–∞–ª–µ–Ω–æ: ${del.deleted_rows}`);
      setProgress(20);

      log('–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–æ–≤...');
      const reg = await api('get_all_regions');
      log(`‚úì –†–µ–≥–∏–æ–Ω–æ–≤: ${reg.regions.length}`);
      setProgress(40);

      const records: any[] = [];
      const dates: [string, number][] = [
        ['2024-01-01', 1.00],
        ['2024-07-01', 1.023],
        ['2024-12-01', 1.045]
      ];

      let moscowId = null;
      let spbId = null;

      for (const region of reg.regions) {
        const base = REGIONAL_TARIFFS[region.name] || 5.50;
        if (region.name === '–ú–æ—Å–∫–≤–∞') moscowId = region.id;
        if (region.name === '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥') spbId = region.id;

        for (const [date, mult] of dates) {
          records.push({
            region_id: region.id,
            price: Math.round(base * mult * 100) / 100,
            recorded_at: date,
            tariff_type: 'single',
            consumer_type: 'standard',
            time_zone: 'day',
            source: 'official_2024'
          });
        }
      }

      if (moscowId) {
        log('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–æ–≤ –ú–æ—Å–∫–≤—ã...');
        const msk: [string, string, string, string, number][] = [
          ['2024-01-01', 'two_zone', 'standard', 'day', 6.70],
          ['2024-01-01', 'two_zone', 'standard', 'night', 2.19],
          ['2024-01-01', 'three_zone', 'standard', 'peak', 7.32],
          ['2024-01-01', 'three_zone', 'standard', 'half_peak', 5.92],
          ['2024-01-01', 'three_zone', 'standard', 'night', 1.99],
          ['2024-07-01', 'two_zone', 'standard', 'day', 6.85],
          ['2024-07-01', 'two_zone', 'standard', 'night', 2.24],
          ['2024-07-01', 'three_zone', 'standard', 'peak', 7.48],
          ['2024-07-01', 'three_zone', 'standard', 'half_peak', 6.06],
          ['2024-07-01', 'three_zone', 'standard', 'night', 2.03],
          ['2024-12-01', 'two_zone', 'standard', 'day', 7.00],
          ['2024-12-01', 'two_zone', 'standard', 'night', 2.29],
          ['2024-12-01', 'three_zone', 'standard', 'peak', 7.65],
          ['2024-12-01', 'three_zone', 'standard', 'half_peak', 6.19],
          ['2024-12-01', 'three_zone', 'standard', 'night', 2.08],
          ['2024-01-01', 'single', 'electric_stove', 'day', 4.14],
          ['2024-01-01', 'two_zone', 'electric_stove', 'day', 4.69],
          ['2024-01-01', 'two_zone', 'electric_stove', 'night', 1.53],
          ['2024-07-01', 'single', 'electric_stove', 'day', 4.24],
          ['2024-07-01', 'two_zone', 'electric_stove', 'day', 4.79],
          ['2024-07-01', 'two_zone', 'electric_stove', 'night', 1.56],
          ['2024-12-01', 'single', 'electric_stove', 'day', 4.33],
          ['2024-12-01', 'two_zone', 'electric_stove', 'day', 4.90],
          ['2024-12-01', 'two_zone', 'electric_stove', 'night', 1.60]
        ];
        for (const [d, t, c, z, p] of msk) {
          records.push({
            region_id: moscowId, price: p, recorded_at: d,
            tariff_type: t, consumer_type: c, time_zone: z,
            source: 'official_2024_detailed'
          });
        }
      }

      if (spbId) {
        log('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–æ–≤ –°–ü–±...');
        records.push(
          { region_id: spbId, price: 5.70, recorded_at: '2024-01-01', tariff_type: 'single', consumer_type: 'standard', time_zone: 'day', source: 'official_2024_detailed' },
          { region_id: spbId, price: 6.19, recorded_at: '2024-07-01', tariff_type: 'single', consumer_type: 'standard', time_zone: 'day', source: 'official_2024_detailed' },
          { region_id: spbId, price: 6.32, recorded_at: '2024-12-01', tariff_type: 'single', consumer_type: 'standard', time_zone: 'day', source: 'official_2024_detailed' }
        );
      }

      log(`–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ ${records.length} –∑–∞–ø–∏—Å–µ–π`);
      setProgress(60);

      log('–í—Å—Ç–∞–≤–∫–∞ –≤ –ë–î...');
      let inserted = 0;
      for (let i = 0; i < records.length; i += 100) {
        const batch = records.slice(i, i + 100);
        const res = await api('insert_prices', { prices: batch });
        inserted += res.inserted_rows;
        log(`  –ü–∞–∫–µ—Ç ${Math.floor(i / 100) + 1}: +${res.inserted_rows}`);
        setProgress(60 + (i / records.length) * 35);
      }

      setProgress(100);
      log('='.repeat(60));
      log(`‚úì –ì–û–¢–û–í–û! –í—Å—Ç–∞–≤–ª–µ–Ω–æ ${inserted} –∑–∞–ø–∏—Å–µ–π`);
      log('='.repeat(60));
    } catch (e: any) {
      log(`‚ùå –û–®–ò–ë–ö–ê: ${e.message}`);
    } finally {
      setRunning(false);
    }
  };

  return (
    <div style={{ padding: 20, maxWidth: 900, margin: '0 auto', fontFamily: 'monospace' }}>
      <h1 style={{ textAlign: 'center' }}>üóÑÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î —Ç–∞—Ä–∏—Ñ–æ–≤</h1>
      
      <div style={{ textAlign: 'center', margin: '20px 0' }}>
        <button
          onClick={run}
          disabled={running}
          style={{
            padding: '12px 30px',
            fontSize: 16,
            fontWeight: 'bold',
            background: running ? '#ccc' : '#00cc00',
            color: '#000',
            border: 'none',
            borderRadius: 5,
            cursor: running ? 'not-allowed' : 'pointer'
          }}
        >
          {running ? '‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...' : '‚ñ∂ –ó–∞–ø—É—Å—Ç–∏—Ç—å'}
        </button>
      </div>

      {progress > 0 && (
        <div style={{ margin: '20px 0' }}>
          <div style={{ background: '#ddd', height: 25, borderRadius: 5, overflow: 'hidden' }}>
            <div style={{
              background: '#00cc00',
              height: '100%',
              width: `${progress}%`,
              transition: 'width 0.3s',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              color: '#000',
              fontWeight: 'bold'
            }}>
              {progress}%
            </div>
          </div>
        </div>
      )}

      <div style={{
        background: '#000',
        color: '#0f0',
        padding: 20,
        borderRadius: 8,
        minHeight: 400,
        maxHeight: 500,
        overflow: 'auto',
        whiteSpace: 'pre-wrap'
      }}>
        {logs.length === 0 ? '–ù–∞–∂–º–∏—Ç–µ "–ó–∞–ø—É—Å—Ç–∏—Ç—å" –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...' : logs.join('\n')}
      </div>
    </div>
  );
}
